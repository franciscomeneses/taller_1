theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
) + coord_flip()
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold",
size=8) +  # Etiqueta en la media
geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error),vjust=-0.1, width = 0.2) +
geom_text(aes(label = Media - Error, y = Media - Error), hjust = 1.5, color = "red",
size=8) +  # Límite inferior
geom_text(aes(label = Media + Error, y = Media + Error), hjust = -1, color = "red",
size=8) +  # Límite superior
labs(title = "Conocimiento Civico según dep",
y = "Puntaje Conocimiento Civico ",
x = "Grupo") +
ylim(0, 100) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
) + coord_flip()  + scale_fill_brewer(palette = "PuOr")
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold",
size=8) +  # Etiqueta en la media
geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error),vjust=-0.1, width = 0.2) +
geom_text(aes(label = Media - Error, y = Media - Error), hjust = 1.5, color = "red",
size=8) +  # Límite inferior
geom_text(aes(label = Media + Error, y = Media + Error), hjust = -1, color = "red",
size=8) +  # Límite superior
labs(title = "Conocimiento Civico según dep",
y = "Puntaje Conocimiento Civico ",
x = "Grupo") +
ylim(0, 100) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
) + coord_flip()  + scale_fill_brewer(palette = "PuOr")
#install.packages("pagedown")
#pagedown::chrome_print("Presentacion.html",output="Presentacion.pdf")
library(dplyr)
require("knitr")
options(htmltools.dir.version = FALSE)
pacman::p_load(RefManageR)
# Cargar librerías necesarias
library(ggplot2)
# Crear datos ficticios
set.seed(123)
categorias <- c("Desayuno + Almuerzo", "Desayuno", "Nada")
medias <- c(75, 50, 25)  # Valores entre 0 y 100
errores <- c(10, 15, 4)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold", size=10) +  # Etiqueta en la media
#geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error), width = 0.2) +
#geom_text(aes(label = Media - Error, y = Media - Error), vjust = 1.5, color = "red") +  # Límite inferior
#geom_text(aes(label = Media + Error, y = Media + Error), vjust = -1, color = "red") +  # Límite superior
labs(title = "Asistencia según intervención",
y = "Porcentaje de asistencia",
x = "Grupo") +
ylim(0, 80) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
)
# Cargar librerías necesarias
library(ggplot2)
# Crear datos ficticios
set.seed(123)
categorias <- c("Desayuno + Almuerzo", "Desayuno", "Nada")
medias <- c(75, 50, 25)  # Valores entre 0 y 100
errores <- c(10, 20, 4)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold", size=10) +  # Etiqueta en la media
geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error), width = 0.2) +
#geom_text(aes(label = Media - Error, y = Media - Error), vjust = 1.5, color = "red") +  # Límite inferior
#geom_text(aes(label = Media + Error, y = Media + Error), vjust = -1, color = "red") +  # Límite superior
labs(title = "Asistencia según intervención",
y = "Porcentaje de asistencia",
x = "Grupo") +
ylim(0, 90) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
)
# Cargar librerías necesarias
library(ggplot2)
# Crear datos ficticios
set.seed(123)
categorias <- c("Desayuno + Almuerzo", "Desayuno", "Nada")
medias <- c(75, 50, 25)  # Valores entre 0 y 100
errores <- c(10, 15, 4)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold",
size=6) +  # Etiqueta en la media
geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error), width = 0.2) +
geom_text(aes(label = Media - Error, y = Media - Error),
vjust = 1.5, color = "red",size=6) +  # Límite inferior
geom_text(aes(label = Media + Error, y = Media + Error),
vjust = -1, color = "red",size=6) +  # Límite superior
labs(title = "Asistencia según intervención",
y = "Porcentaje de asistencia",
x = "Grupo") +
ylim(0, 100) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
)
library(kableExtra)
# Crear datos ficticios
set.seed(123)
categorias <- c("Desayuno + Almuerzo", "Desayuno", "Nada")
medias <- c(75, 50, 25)  # Valores entre 0 y 100
errores <- c(10, 15, 4)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
datos %>% mutate(
valor_inferior= as.numeric(Media -  Error),
valor_superior= as.numeric(Media +  Error),
) %>% select(-Error) %>%
kbl() %>%
kable_classic_2(full_width = F)
# Cargar librerías necesarias
library(ggplot2)
# Crear datos ficticios
set.seed(123)
categorias <- c("Municipales", "Slep", "Subvencionados")
medias <- c(47, 57, 70)  # Valores entre 0 y 100
errores <- c(10, 15, 15)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold",
size=8) +  # Etiqueta en la media
geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error),vjust=-0.1, width = 0.2) +
geom_text(aes(label = Media - Error, y = Media - Error), hjust = 1.5, color = "red",
size=8) +  # Límite inferior
geom_text(aes(label = Media + Error, y = Media + Error), hjust = -1, color = "red",
size=8) +  # Límite superior
labs(title = "Conocimiento Civico según dep",
y = "Puntaje Conocimiento Civico ",
x = "Grupo") +
ylim(0, 100) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
) + coord_flip()  + scale_fill_brewer(palette = "PuOr")
library(kableExtra)
# Crear datos ficticios
set.seed(123)
categorias <- c("Municipales", "Slep", "Subvencionados")
medias <- c(262, 220, 270)  # Valores entre 0 y 100
errores <- c(5, 5, 5)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
datos %>% mutate(
valor_inferior= as.numeric(Media -  Error),
valor_superior= as.numeric(Media +  Error),
) %>% select(-Error) %>%
kbl() %>%
kable_classic_2(full_width = F)
#install.packages("pagedown")
#pagedown::chrome_print("Presentacion.html",output="Presentacion.pdf")
library(dplyr)
require("knitr")
options(htmltools.dir.version = FALSE)
pacman::p_load(RefManageR)
# Cargar librerías necesarias
library(ggplot2)
# Crear datos ficticios
set.seed(123)
categorias <- c("Desayuno + Almuerzo", "Desayuno", "Nada")
medias <- c(75, 50, 25)  # Valores entre 0 y 100
errores <- c(10, 15, 4)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold", size=10) +  # Etiqueta en la media
#geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error), width = 0.2) +
#geom_text(aes(label = Media - Error, y = Media - Error), vjust = 1.5, color = "red") +  # Límite inferior
#geom_text(aes(label = Media + Error, y = Media + Error), vjust = -1, color = "red") +  # Límite superior
labs(title = "Asistencia según intervención",
y = "Porcentaje de asistencia",
x = "Grupo") +
ylim(0, 80) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
)
# Cargar librerías necesarias
library(ggplot2)
# Crear datos ficticios
set.seed(123)
categorias <- c("Desayuno + Almuerzo", "Desayuno", "Nada")
medias <- c(75, 50, 25)  # Valores entre 0 y 100
errores <- c(10, 20, 4)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold", size=10) +  # Etiqueta en la media
geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error), width = 0.2) +
#geom_text(aes(label = Media - Error, y = Media - Error), vjust = 1.5, color = "red") +  # Límite inferior
#geom_text(aes(label = Media + Error, y = Media + Error), vjust = -1, color = "red") +  # Límite superior
labs(title = "Asistencia según intervención",
y = "Porcentaje de asistencia",
x = "Grupo") +
ylim(0, 90) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
)
# Cargar librerías necesarias
library(ggplot2)
# Crear datos ficticios
set.seed(123)
categorias <- c("Desayuno + Almuerzo", "Desayuno", "Nada")
medias <- c(75, 50, 25)  # Valores entre 0 y 100
errores <- c(10, 15, 4)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold",
size=6) +  # Etiqueta en la media
geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error), width = 0.2) +
geom_text(aes(label = Media - Error, y = Media - Error),
vjust = 1.5, color = "red",size=6) +  # Límite inferior
geom_text(aes(label = Media + Error, y = Media + Error),
vjust = -1, color = "red",size=6) +  # Límite superior
labs(title = "Asistencia según intervención",
y = "Porcentaje de asistencia",
x = "Grupo") +
ylim(0, 100) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
)
library(kableExtra)
# Crear datos ficticios
set.seed(123)
categorias <- c("Desayuno + Almuerzo", "Desayuno", "Nada")
medias <- c(75, 50, 25)  # Valores entre 0 y 100
errores <- c(10, 15, 4)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
datos %>% mutate(
valor_inferior= as.numeric(Media -  Error),
valor_superior= as.numeric(Media +  Error),
) %>% select(-Error) %>%
kbl() %>%
kable_classic_2(full_width = F)
# Cargar librerías necesarias
library(ggplot2)
# Crear datos ficticios
set.seed(123)
categorias <- c("Municipales", "Slep", "Subvencionados")
medias <- c(47, 57, 70)  # Valores entre 0 y 100
errores <- c(10, 15, 15)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
# Graficar barras con intervalos de confianza y etiquetas
ggplot(datos, aes(x = Grupo, y = Media,  fill = Grupo,)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label = Media, y = Media), vjust = -0.5, fontface = "bold",
size=8) +  # Etiqueta en la media
geom_errorbar(aes(ymin = Media - Error, ymax = Media + Error),vjust=-0.1, width = 0.2) +
geom_text(aes(label = Media - Error, y = Media - Error), hjust = 1.5, color = "red",
size=8) +  # Límite inferior
geom_text(aes(label = Media + Error, y = Media + Error), hjust = -1, color = "red",
size=8) +  # Límite superior
labs(title = "Conocimiento Civico según dep",
y = "Puntaje Conocimiento Civico ",
x = "Grupo") +
ylim(0, 100) +  # Ajustar límites del eje Y
theme_minimal() +
theme(title = element_text(size=20),
legend.position = "bottom",
legend.text = element_text(size=20),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
) + coord_flip()  + scale_fill_brewer(palette = "PuOr")
library(kableExtra)
# Crear datos ficticios
set.seed(123)
categorias <- c("Municipales", "Slep", "Subvencionados")
medias <- c(262, 220, 270)  # Valores entre 0 y 100
errores <- c(5, 5, 5)  # Supuestos errores estándar
# Crear un data frame
datos <- data.frame(Grupo = categorias, Media = medias, Error = errores)
datos %>% mutate(
valor_inferior= as.numeric(Media -  Error),
valor_superior= as.numeric(Media +  Error),
) %>% select(-Error) %>%
kbl() %>%
kable_classic_2(full_width = F)
xaringan::infinite_moon_reader()
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("A", "B"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 10, sd = 2),  # Grupo A
rnorm(50, mean = 12, sd = 2))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
library(dplyr)
require("knitr")
options(htmltools.dir.version = FALSE)
pacman::p_load(RefManageR)
options(scipen=999)
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 2),  # Grupo A
rnorm(50, mean = 60, sd = 2))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
library(dplyr)
require("knitr")
options(htmltools.dir.version = FALSE)
pacman::p_load(RefManageR)
options(scipen=999)
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 6),  # Grupo A
rnorm(50, mean = 60, sd = 5))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
options(scipen=999)
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 4),  # Grupo A
rnorm(50, mean = 60, sd = 5))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
options(scipen=999)
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 4),  # Grupo A
rnorm(50, mean = 60, sd = 3))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
xaringan::infinite_moon_reader()
options(scipen=999)
# Fijar la semilla para reproducibilidad
set.seed(123)
# Crear la base de datos con 100 observaciones
grupo <- rep(c("Hom", "Muj"), each = 50)  # Variable categórica de dos niveles
valor <- c(rnorm(50, mean = 62, sd = 6),  # Grupo A
rnorm(50, mean = 60, sd = 3))  # Grupo B
# Crear el data frame
datos <- data.frame(grupo, valor)
# Realizar la prueba t de Student
resultado_ttest <- t.test(valor ~ grupo, data = datos, var.equal = TRUE)
# Mostrar el resultado
print(resultado_ttest)
xaringan::infinite_moon_reader()
library(shiny); runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
install.packages('rsconnect')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
runApp('app_tlc.R')
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación del Teorema del Límite Central"),
sidebarLayout(
sidebarPanel(
selectInput("distribution", "Selecciona la distribución:",
choices = c("Normal" = "norm",
"Uniforme" = "unif",
"Exponencial" = "exp")),
numericInput("mean", "Media de la población:", value = 6000),
numericInput("sd", "Desviación estándar de la población:", value = 200, min = 0.1),
numericInput("n", "Tamaño de la muestra (n):", value = 30, min = 2),
numericInput("num_samples", "Número de muestras:", value = 1000, min = 1),
actionButton("generate", "Generar Muestras")
),
mainPanel(
h3("Distribución de la Variable Original"),
plotOutput("histOriginal"),
h3("Distribución del Promedio de las Muestras"),
plotOutput("histSampleMean"),
h3("Distribución de los Datos de Cada Muestra"),
plotOutput("histSampleDist"),
h3("Estadísticas de la Muestra"),
verbatimTextOutput("stats")
)
)
)
# Función reactiva para generar datos y muestras
data <- eventReactive(input$generate, {
set.seed(123)
n_total <- 100000  # Tamaño grande de la población
population <- switch(input$distribution,
"norm" = rnorm(n_total, mean = input$mean, sd = input$sd),
"unif" = runif(n_total, min = input$mean - input$sd * sqrt(3), max = input$mean + input$sd * sqrt(3)),
"exp" = rexp(n_total, rate = 1 / input$mean))
# Generar muestras y calcular sus estadísticas
samples <- replicate(input$num_samples, sample(population, input$n), simplify = FALSE)
sample_means <- sapply(samples, mean)
sample_sds <- sapply(samples, sd)
sample_ses <- sample_sds / sqrt(input$n)
ci_lower <- sample_means - 1.96 * sample_ses
ci_upper <- sample_means + 1.96 * sample_ses
# Convertir datos de muestras a formato largo para ggplot2 (hasta 9 muestras para visualización)
if (input$num_samples > 9) {
samples <- samples[1:9]
}
sample_data <- do.call(rbind, lapply(seq_along(samples), function(i) {
data.frame(Valor = samples[[i]],
Muestra = factor(i),
Promedio = sample_means[i],
CI_Lower = ci_lower[i],
CI_Upper = ci_upper[i])
}))
list(population = population,
sample_means = sample_means,
sample_sds = sample_sds,
ci_lower = ci_lower,
ci_upper = ci_upper,
sample_data = sample_data)
})
ci_upper
View(ui)
sample_means
runApp('app_tlc.R')
sample_means= 600
mean(sample_means)
sd(mean(sample_means))
runApp('app_tlc.R')
